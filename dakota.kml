// CACHE ID 03153d0c-11a0-45f9-8495-1d1a00295d88-no-provenance
import(sys)
import(scheduler)
import(swift)
importStdlib(1)

types(
	xs:schema(
    			xs:simpleType("file", xs:restriction("string"))
    )
)
swift.field.dakota.file.array.int := swift:field("dakota", "file[int]")
swift.field.outdat.file := swift:field("outdat", "file")
swift.field.const.float := swift:field("const", "float")
swift.field.const.string := swift:field("const", "string")
swift.field.templatedir.file.array.int := swift:field("templatedir", "file[int]")
swift.field.swift.mapper.17025.string := swift:field("swift.mapper.17025", "string")
swift.field.const.boolean := swift:field("const", "boolean")
swift.field.swift.mapper.17004.string := swift:field("swift.mapper.17004", "string")
swift.field.swift.mapper.17027.string := swift:field("swift.mapper.17027", "string")
swift.field.outhtml.file := swift:field("outhtml", "file")
swift.field.swift.mapper.17021.string := swift:field("swift.mapper.17021", "string")
swift.field.swift.mapper.17023.string := swift:field("swift.mapper.17023", "string")
swift.field.swift.mapper.17007.string := swift:field("swift.mapper.17007", "string")
swift.field.swiftconf.file := swift:field("swiftconf", "file")
swift.field.swift.mapper.17029.string := swift:field("swift.mapper.17029", "string")
swift.field.perr.file := swift:field("perr", "file")
swift.field.swift.mapper.17009.string := swift:field("swift.mapper.17009", "string")
swift.field.templatedir_ofa.file.array.int := swift:field("templatedir_ofa", "file[int]")
swift.field.derr.file := swift:field("derr", "file")
swift.field.swift.mapper.17014.string := swift:field("swift.mapper.17014", "string")
swift.field.swift.mapper.17016.string := swift:field("swift.mapper.17016", "string")
swift.field.swift.mapper.17017.string := swift:field("swift.mapper.17017", "string")
swift.field.openfoam.file.array.int := swift:field("openfoam", "file[int]")
swift.field.swift.mapper.17011.string := swift:field("swift.mapper.17011", "string")
swift.field.swift.mapper.17013.string := swift:field("swift.mapper.17013", "string")
swift.field.temp.int := swift:field("temp", "int")
swift.field.swift.mapper.17019.string := swift:field("swift.mapper.17019", "string")
swift.field.dout.file := swift:field("dout", "file")
swift.field.const.int := swift:field("const", "int")
swift.field.pout.file := swift:field("pout", "file")
swift.string.17026 := swift:new(swift.field.const.string, value="logs/dakota.out")
swift.string.17015 := swift:new(swift.field.const.string, value="dakota")
swift.string.17020 := swift:new(swift.field.const.string, value="mapper_ofa.sh")
swift.string.17000 := swift:new(swift.field.const.string, value="openfoam/utils/prepInputs.sh")
swift.string.17024 := swift:new(swift.field.const.string, value="logs/prep.err")
swift.string.17018 := swift:new(swift.field.const.string, value="templatedir")
swift.string.17028 := swift:new(swift.field.const.string, value="logs/dakota.err")
swift.string.17012 := swift:new(swift.field.const.string, value="openfoam")
swift.string.17022 := swift:new(swift.field.const.string, value="logs/prep.out")
swift.string.17001 := swift:new(swift.field.const.string, value="dakota/start_docker.sh")
swift.string.17008 := swift:new(swift.field.const.string, value="swift.conf")
swift.string.17003 := swift:new(swift.field.const.string, value="results/out.dat")
swift.string.17010 := swift:new(swift.field.const.string, value="mapper.sh")
swift.string.17006 := swift:new(swift.field.const.string, value="results/out.html")
swift.string.17002 := swift:new(swift.field.const.string, value="dat")
swift.string.17005 := swift:new(swift.field.const.string, value="html")
swift.mapper.17004 := 
			swift:new(swift.field.swift.mapper.17004.string)
outdat := 
		swift:new(swift.field.outdat.file, _defline=12
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17004))
		)
swift.mapper.17007 := 
			swift:new(swift.field.swift.mapper.17007.string)
outhtml := 
		swift:new(swift.field.outhtml.file, _defline=13
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17007))
		)
swift.mapper.17009 := 
			swift:new(swift.field.swift.mapper.17009.string)
swiftconf := 
		swift:new(swift.field.swiftconf.file, readCount=1, _defline=17, input=true
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17009))
		)
swift.mapper.17011 := 
			swift:new(swift.field.swift.mapper.17011.string)
swift.mapper.17013 := 
			swift:new(swift.field.swift.mapper.17013.string)
openfoam := 
		swift:new(swift.field.openfoam.file.array.int, readCount=1, _defline=21, input=true
			swift:mapping("Ext", swift:parameter("exec", swift.mapper.17011)
			swift:parameter("root", swift.mapper.17013))
		)
swift.mapper.17014 := 
			swift:new(swift.field.swift.mapper.17014.string)
swift.mapper.17016 := 
			swift:new(swift.field.swift.mapper.17016.string)
dakota := 
		swift:new(swift.field.dakota.file.array.int, readCount=1, _defline=22, input=true
			swift:mapping("Ext", swift:parameter("exec", swift.mapper.17014)
			swift:parameter("root", swift.mapper.17016))
		)
swift.mapper.17017 := 
			swift:new(swift.field.swift.mapper.17017.string)
swift.mapper.17019 := 
			swift:new(swift.field.swift.mapper.17019.string)
swift.mapper.17021 := 
			swift:new(swift.field.swift.mapper.17021.string)
templatedir_ofa := 
		swift:new(swift.field.templatedir_ofa.file.array.int, readCount=2, _defline=24
			swift:mapping("Ext", swift:parameter("exec", swift.mapper.17021))
		)
swift.mapper.17023 := 
			swift:new(swift.field.swift.mapper.17023.string)
pout := 
		swift:new(swift.field.pout.file, _defline=45
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17023))
		)
swift.mapper.17025 := 
			swift:new(swift.field.swift.mapper.17025.string)
perr := 
		swift:new(swift.field.perr.file, _defline=46
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17025))
		)
swift.mapper.17027 := 
			swift:new(swift.field.swift.mapper.17027.string)
dout := 
		swift:new(swift.field.dout.file, _defline=47
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17027))
		)
swift.mapper.17029 := 
			swift:new(swift.field.swift.mapper.17029.string)
derr := 
		swift:new(swift.field.derr.file, _defline=48
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17029))
		)

prepInputs := function(pout, perr, templatedir, openfoam) {
	swift:unitStart("PROCEDURE", name="prepInputs", line=33, outputs="pout,perr,templatedir")
	swift:waitFor(openfoam)
	k:tailcall(
		swift:execute(
			"prepInputs",
				swift:stageIn(openfoam)
				swift:stageOut(pout, perr, templatedir)
	  		swift:commands(
	  				swift:command("bash", null, swiftscript:filename(#_line=34
	  				pout
	  			), swiftscript:filename(#_line=34
	  				perr
	  			), swift.string.17000)
	  		)
		)
	)
	swift:unitEnd("PROCEDURE", name="prepInputs", line=33)}

runDAKOTA := function(pout, perr, outd, outh, templatedir, dakota, swiftconf) {
	swift:unitStart("PROCEDURE", name="runDAKOTA", line=28, outputs="pout,perr,outd,outh")
	swift:waitFor(templatedir, dakota, swiftconf)
	k:tailcall(
		swift:execute(
			"runDAKOTA",
				swift:stageIn(templatedir, dakota, swiftconf)
				swift:stageOut(pout, perr, outd, outh)
	  		swift:commands(
	  				swift:command("bash", null, swiftscript:filename(#_line=29
	  				pout
	  			), swiftscript:filename(#_line=29
	  				perr
	  			), swift.string.17001)
	  		)
		)
	)
	swift:unitEnd("PROCEDURE", name="runDAKOTA", line=28)}

restartLog(name = k:concat(contextAttribute("SWIFT:SCRIPT_NAME"), "-", contextAttribute("SWIFT:RUN_ID"))) {
	swift:mains(
		swift:startProgressTicker()
		uparallel(
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17004)
				swiftscript:arg$string$string$(#_line=12
					swift.string.17002, swift.string.17003
				)
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17007)
				swiftscript:arg$string$string$(#_line=13
					swift.string.17005, swift.string.17006
				)
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17009)
				swift.string.17008
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17011)
				swift.string.17010
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17013)
				swift.string.17012
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17014)
				swift.string.17010
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17016)
				swift.string.17015
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17017)
				swift.string.17010
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17019)
				swift.string.17018
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17021)
				swift.string.17020
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17023)
				swift.string.17022
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17025)
				swift.string.17024
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17027)
				swift.string.17026
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17029)
				swift.string.17028
			)
			prepInputs(#_line=49
				k:getAndDelete(pout), k:getAndDelete(perr), swift:readVar(templatedir_ofa)
				swift:readVar(openfoam)
			)
			runDAKOTA(#_line=50
				k:getAndDelete(dout), k:getAndDelete(derr), k:getAndDelete(outdat), k:getAndDelete(outhtml)
				swift:readVar(templatedir_ofa), swift:readVar(dakota), swift:readVar(swiftconf)
			)
		)
		swift:stopProgressTicker()
	)
}

swift:cleanDataset(swiftconf)
swift:cleanDataset(perr)
swift:cleanDataset(dakota)
swift:cleanDataset(dout)
swift:cleanDataset(outhtml)
swift:cleanDataset(templatedir_ofa)
swift:cleanDataset(outdat)
swift:cleanDataset(pout)
swift:cleanDataset(openfoam)
swift:cleanDataset(derr)
swift:cleanDataset(shutdown=true)