// CACHE ID 03153d0c-11a0-45f9-8495-1d1a00295d88-no-provenance
import(sys)
import(scheduler)
import(swift)
importStdlib(1)

types(
	xs:schema(
    			xs:simpleType("file", xs:restriction("string"))
    )
)
swift.field.html.file := swift:field("html", "file")
swift.field.const.float := swift:field("const", "float")
swift.field.const.string := swift:field("const", "string")
swift.field.const.boolean := swift:field("const", "boolean")
swift.field.swift.mapper.17026.string := swift:field("swift.mapper.17026", "string")
swift.field.swift.mapper.17006.string := swift:field("swift.mapper.17006", "string")
swift.field.swift.mapper.17021.string := swift:field("swift.mapper.17021", "string")
swift.field.swift.mapper.17022.string := swift:field("swift.mapper.17022", "string")
swift.field.outtar.file := swift:field("outtar", "file")
swift.field.sout.file := swift:field("sout", "file")
swift.field.sweep.file := swift:field("sweep", "file")
swift.field.swift.mapper.17029.string := swift:field("swift.mapper.17029", "string")
swift.field.swift.mapper.17009.string := swift:field("swift.mapper.17009", "string")
swift.field.JSONfile.file := swift:field("JSONfile", "file")
swift.field.outpng.file := swift:field("outpng", "file")
swift.field.i.int := swift:field("i", "int")
swift.field.caseFile.file := swift:field("caseFile", "file")
swift.field.cases.string.array.int := swift:field("cases", "string[int]")
swift.field.swift.mapper.17015.string := swift:field("swift.mapper.17015", "string")
swift.field.utils.file.array.int := swift:field("utils", "file[int]")
swift.field.serr.file := swift:field("serr", "file")
swift.field.swift.mapper.17032.string := swift:field("swift.mapper.17032", "string")
swift.field.input.file := swift:field("input", "file")
swift.field.swift.mapper.17011.string := swift:field("swift.mapper.17011", "string")
swift.field.swift.mapper.17034.string := swift:field("swift.mapper.17034", "string")
swift.field.swift.mapper.17013.string := swift:field("swift.mapper.17013", "string")
swift.field.temp.int := swift:field("temp", "int")
swift.field.swift.mapper.17018.string := swift:field("swift.mapper.17018", "string")
swift.field.state.file := swift:field("state", "file")
swift.field.outlogs.file.array.int := swift:field("outlogs", "file[int]")
swift.field.const.int := swift:field("const", "int")
swift.field.outpngs.file.array.int := swift:field("outpngs", "file[int]")
swift.field.out.file := swift:field("out", "file")
swift.string.17002 := swift:new(swift.field.const.string, value="cases.list")
swift.string.17020 := swift:new(swift.field.const.string, value="results.html")
swift.string.17024 := swift:new(swift.field.const.string, value="output/tgz/")
swift.string.17027 := swift:new(swift.field.const.string, value="output/png/")
swift.string.17012 := swift:new(swift.field.const.string, value="sample_inputs/params.run")
swift.string.17003 := swift:new(swift.field.const.string, value="utils/postSweep.sh")
swift.string.17023 := swift:new(swift.field.const.string, value="\n%i Cases in Simulation\n\n")
swift.string.17005 := swift:new(swift.field.const.string, value="sample_inputs/elbow.tgz")
swift.string.17028 := swift:new(swift.field.const.string, value=".png")
swift.string.17000 := swift:new(swift.field.const.string, value="utils/runOpenfoam.sh")
swift.string.17025 := swift:new(swift.field.const.string, value=".tgz")
swift.string.17030 := swift:new(swift.field.const.string, value="output/log/out/")
swift.string.17001 := swift:new(swift.field.const.string, value="utils/expandSweep.py")
swift.string.17004 := swift:new(swift.field.const.string, value="input")
swift.string.17033 := swift:new(swift.field.const.string, value="output/log/err/")
swift.string.17010 := swift:new(swift.field.const.string, value="sample_inputs/elbowKPI.json")
swift.string.17031 := swift:new(swift.field.const.string, value=".txt")
swift.string.17014 := swift:new(swift.field.const.string, value="utils")
swift.string.17017 := swift:new(swift.field.const.string, value="results.tgz")
swift.string.17019 := swift:new(swift.field.const.string, value="html")
swift.string.17007 := swift:new(swift.field.const.string, value="state")
swift.string.17008 := swift:new(swift.field.const.string, value="sample_inputs/elbow.pvsm")
swift.string.17016 := swift:new(swift.field.const.string, value="results")
swift.mapper.17006 := 
			swift:new(swift.field.swift.mapper.17006.string)
input := 
		swift:new(swift.field.input.file, readCount=1, _defline=8, input=true
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17006))
		)
swift.mapper.17009 := 
			swift:new(swift.field.swift.mapper.17009.string)
state := 
		swift:new(swift.field.state.file, readCount=1, _defline=9, input=true
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17009))
		)
swift.mapper.17011 := 
			swift:new(swift.field.swift.mapper.17011.string)
JSONfile := 
		swift:new(swift.field.JSONfile.file, readCount=1, _defline=10, input=true
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17011))
		)
swift.mapper.17013 := 
			swift:new(swift.field.swift.mapper.17013.string)
sweep := 
		swift:new(swift.field.sweep.file, readCount=1, _defline=12, input=true
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17013))
		)
swift.mapper.17015 := 
			swift:new(swift.field.swift.mapper.17015.string)
utils := 
		swift:new(swift.field.utils.file.array.int, readCount=2, _defline=14, input=true
			swift:mapping("filesys_mapper", swift:parameter("location", swift.mapper.17015))
		)
swift.mapper.17018 := 
			swift:new(swift.field.swift.mapper.17018.string)
swift.mapper.17021 := 
			swift:new(swift.field.swift.mapper.17021.string)
swift.mapper.17022 := 
			swift:new(swift.field.swift.mapper.17022.string)
caseFile := 
		swift:new(swift.field.caseFile.file, readCount=2, _defline=38
			swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17022))
		)
cases := 
			swift:new(swift.field.cases.string.array.int, readCount=3, _defline=40)
outpngs := 
		swift:new(swift.field.outpngs.file.array.int, waitCount=1, _defline=44
			swift:mapping("InternalMapper", swift:parameter("prefix", swift:new(swift.field.const.string, value="outpngs-44")))
		)
outlogs := 
		swift:new(swift.field.outlogs.file.array.int, waitCount=1, _defline=45
			swift:mapping("InternalMapper", swift:parameter("prefix", swift:new(swift.field.const.string, value="outlogs-45")))
		)

runOpenfoam := function(out, outpng, sout, serr, input, c, state, utils, JSONfile) {
	swift:unitStart("PROCEDURE", name="runOpenfoam", line=26, outputs="out,outpng,sout,serr")
	swift:waitFor(input, c, state, utils, JSONfile)
	k:tailcall(
		swift:execute(
			"runOpenfoam",
				swift:stageIn(input, state, utils, JSONfile)
				swift:stageOut(out, outpng, sout, serr)
	  		swift:commands(
	  				swift:command("bash", null, swiftscript:filename(#_line=28
	  				sout
	  			), swiftscript:filename(#_line=28
	  				serr
	  			), swift.string.17000, swiftscript:filename(#_line=28
	  				input
	  			), swiftscript:filename(#_line=28
	  				state
	  			), c, swiftscript:filename(#_line=28
	  				out
	  			), swiftscript:filename(#_line=28
	  				outpng
	  			), swiftscript:filename(#_line=28
	  				JSONfile
	  			))
	  		)
		)
	)
	swift:unitEnd("PROCEDURE", name="runOpenfoam", line=26)}

expandSweep := function(cases, sweep, utils) {
	swift:unitStart("PROCEDURE", name="expandSweep", line=22, outputs="cases")
	swift:waitFor(sweep, utils)
	k:tailcall(
		swift:execute(
			"expandSweep",
				swift:stageIn(sweep, utils)
				swift:stageOut(cases)
	  		swift:commands(
	  				swift:command("python", null, null, null, swift.string.17001, swiftscript:filename(#_line=23
	  				sweep
	  			), swift.string.17002)
	  		)
		)
	)
	swift:unitEnd("PROCEDURE", name="expandSweep", line=22)}

postSweep := function(out, html, pngs, logs, utils, rpath) {
	swift:unitStart("PROCEDURE", name="postSweep", line=31, outputs="out,html")
	swift:waitFor(pngs, logs, utils, rpath)
	k:tailcall(
		swift:execute(
			"postSweep",
				swift:stageIn(pngs, logs, utils)
				swift:stageOut(out, html)
	  		swift:commands(
	  				swift:command("bash", null, null, null, swift.string.17003, swiftscript:filename(#_line=32
	  				out
	  			), swiftscript:filename(#_line=32
	  				html
	  			), rpath)
	  		)
		)
	)
	swift:unitEnd("PROCEDURE", name="postSweep", line=31)}

restartLog(name = k:concat(contextAttribute("SWIFT:SCRIPT_NAME"), "-", contextAttribute("SWIFT:RUN_ID"))) {
	swift:mains(
		swift:startProgressTicker()
		uparallel(
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17006)
				swiftscript:arg$string$string$(#_line=8
					swift.string.17004, swift.string.17005
				)
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17009)
				swiftscript:arg$string$string$(#_line=9
					swift.string.17007, swift.string.17008
				)
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17011)
				swift.string.17010
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17013)
				swift.string.17012
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17015)
				swift.string.17014
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17018)
				swiftscript:arg$string$string$(#_line=16
					swift.string.17016, swift.string.17017
				)
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17021)
				swiftscript:arg$string$string$(#_line=17
					swift.string.17019, swift.string.17020
				)
			)
			swift:setFieldValue(
				k:getAndDelete(swift.mapper.17022)
				swift.string.17002
			)
			expandSweep(#_line=39
				swift:readVar(caseFile)
				swift:readVar(sweep), swift:readVar(utils)
			)
			sequential(
				swift:unitStart("INTERNALPROC", name="readData", outputs="cases")
				readData(#_line=40
			    	swift:readVar(cases)
			    	swift:readVar(caseFile)
				)
				swift:unitEnd("INTERNALPROC", name="readData")
			)
			sequential(
				swift:unitStart("INTERNALPROC", name="tracef", outputs="")
				tracef(#_line=42
			parallel(
			    	swift.string.17023
			    	swiftscript:length(#_line=42
			    		swift:readVar(cases)
			    	)
			)
				)
				swift:unitEnd("INTERNALPROC", name="tracef")
			)
			swift:tParallelFor(#_line=46, _kvar="i", _kvarField=swift.field.i.int, _vvar="c", wrefs="outpngs 1 outlogs 1", rrefs="input 1 JSONfile 1 utils 1 state 1",
				getArrayIterator(swift:readVar(cases))) {

				swift:unitStart("FOREACH_IT", line=46) 
				swift.mapper.17026 := 
							swift:new(swift.field.swift.mapper.17026.string)
				outtar := 
						swift:new(swift.field.outtar.file, _defline=47
							swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17026))
						)
				swift.mapper.17029 := 
							swift:new(swift.field.swift.mapper.17029.string)
				outpng := 
						swift:new(swift.field.outpng.file, readCount=2, _defline=48
							swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17029))
						)
				swift.mapper.17032 := 
							swift:new(swift.field.swift.mapper.17032.string)
				sout := 
						swift:new(swift.field.sout.file, readCount=2, _defline=49
							swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17032))
						)
				swift.mapper.17034 := 
							swift:new(swift.field.swift.mapper.17034.string)
				serr := 
						swift:new(swift.field.serr.file, _defline=50
							swift:mapping("SingleFileMapper", swift:parameter("file", swift.mapper.17034))
						)
				uparallel(
					swift:setFieldValue(
						k:getAndDelete(swift.mapper.17026)
						swiftscript:strcat(#_line=47
							swift.string.17024, i, swift.string.17025
						)
					)
					swift:setFieldValue(
						k:getAndDelete(swift.mapper.17029)
						swiftscript:strcat(#_line=48
							swift.string.17027, c, swift.string.17028
						)
					)
					swift:setFieldValue(
						k:getAndDelete(swift.mapper.17032)
						swiftscript:strcat(#_line=49
							swift.string.17030, i, swift.string.17031
						)
					)
					swift:setFieldValue(
						k:getAndDelete(swift.mapper.17034)
						swiftscript:strcat(#_line=50
							swift.string.17033, i, swift.string.17031
						)
					)
					runOpenfoam(#_line=51
						k:getAndDelete(outtar), swift:readVar(outpng), swift:readVar(sout), k:getAndDelete(serr)
						swift:readVar(input), c, swift:readVar(state), swift:readVar(utils), swift:readVar(JSONfile)
					)
					sequential(
					   	swift:setFieldValue(#_line=52
					   		swift:getFieldSubscript(outpngs, i)
					   		swift:readVar(outpng)
					   	)
					   	swift:partialClose(outpngs, 1)
					)
					sequential(
					   	swift:setFieldValue(#_line=53
					   		swift:getFieldSubscript(outlogs, i)
					   		swift:readVar(sout)
					   	)
					   	swift:partialClose(outlogs, 1)
					)
				)
				swift:cleanDataset(outtar)
				swift:cleanDataset(serr)
				swift:cleanDataset(outpng)
				swift:cleanDataset(sout)
				swift:unitEnd("FOREACH_IT", line=46)
			}
		)
		swift:stopProgressTicker()
	)
}

swift:cleanDataset(sweep)
swift:cleanDataset(input)
swift:cleanDataset(JSONfile)
swift:cleanDataset(caseFile)
swift:cleanDataset(cases)
swift:cleanDataset(utils)
swift:cleanDataset(outpngs)
swift:cleanDataset(state)
swift:cleanDataset(outlogs)
swift:cleanDataset(shutdown=true)